//Stack implementation DSA

class stack{
    int a[]=new int[10];
    int top=-1;
    //Push
    public void push(int data)
    {
        if(top==a.length-1)
        {
            System.out.println("Stack is full");
        }
        else{
            top++;
            a[top]=data;
        }
    }
    
    //Pop
    public void pop()
    {
        if(top==-1)
        {
            System.out.print("Stack is empty");
        }
        else
        {
            top--;
        }
    }


    //Peak
    public void peak()
    {
        if(top==-1)
        {
            System.out.println("Stack is empty");
        }
        else{
            System.out.println("Top of the element is :"+a[top]);
        }
    }


    //Display
    public void display()
    {
        for(int i=top;i>=0;i--)
        {
            System.out.println(a[i]+" ");
        }
    }
}
public class Main
{
	public static void main(String[] args) {
		stack s=new stack();
		s.push(10);
		s.push(20);
		s.push(30);
		s.push(40);
		s.push(50);
		s.push(60);
		s.pop();
		s.peak();
		s.display();
	}
}







//Queue implementation DSA

class queue{
    int a[]=new int[10];
    int front=-1;
    int rear=-1;
    //enqueue
    public void enqueue(int data)
    {
        if(rear==a.length-1)
        {
            System.out.println("Queue is full");
        }
        if(front==-1)
        {
         front=0;   
        }
        rear++;
        a[rear]=data;
    }
    
    //Dequeue
    public void dequeue()
    {
        if(front==-1 && rear==-1)
        {
            System.out.print("Queue is empty");
        }
        else
        {
            front++;
        }
    }
    
    
    //Peak
    public void peak()
    {
        if(front==-1 && rear==-1)
        {
            System.out.println("Queue is empty");
        }
        else{
            System.out.println("Peak element is :"+a[front]);
        }
    }
    public void display()
    {
        if (front == -1 || front > rear) {
        System.out.println("Queue is empty");
        }
        else{
        for(int i=front;i<=rear;i++)
        {
            System.out.print(a[i]+" ");
        }
        }
        
    }
}
public class Main
{
	public static void main(String[] args) {
		queue q=new queue();
		q.enqueue(10);
		q.enqueue(20);
		q.enqueue(30);
		q.enqueue(40);
		q.enqueue(50);
		q.enqueue(60);
		q.dequeue();
		q.peak();
		q.display();
	}
}